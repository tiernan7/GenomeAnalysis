Assignment: Assignment1
Name: Tiernan Kennedy
Email: tiernan7@cs.washington.edu
Language: C++
Runtime: 27 seconds 

*=10000000
A=2775536
C=2239132
G=2232476
T=2752856
N=0

*=10000000
A=2697936
C=2304855
G=2296208
T=2701001
N=0

Match Length Histogram:
1 1
2 1
3 1
4 1
5 1
6 1
7 9
8 1707
9 41479
10 332131
11 1626155
12 3313419
13 2548005
14 1161593
15 455215
16 187564
17 92434
18 54623
19 37573
20 27531
21 20943
22 15204
23 11850
24 9613
25 7727
26 5915
27 4891
28 4118
29 3557
30 3001
31 2626
32 2257
33 2005
34 1798
35 1629
36 1470
37 1376
38 1262
39 1179
40 1079
41 989
42 909
43 852
44 804
45 750
46 681
47 621
48 586
49 539
50 508
51 492
52 448
53 418
54 394
55 369
56 349
57 332
58 317
59 298
60 283
61 269
62 253
63 235
64 214
65 206
66 193
67 182
68 176
69 165
70 158
71 151
72 144
73 138
74 125
75 118
76 114
77 108
78 101
79 94
80 90
81 85
82 81
83 76
84 73
85 69
86 66
87 64
88 63
89 63
90 60
91 58
92 56
93 54
94 53
95 50
96 48
97 47
98 45
99 42
100 40
101 40
102 38
103 37
104 37
105 36
106 36
107 36
108 33
109 31
110 30
111 29
112 29
113 29
114 29
115 29
116 29
117 27
118 27
119 27
120 24
121 23
122 23
123 23
124 23
125 23
126 23
127 23
128 22
129 22
130 21
131 20
132 20
133 20
134 18
135 18
136 18
137 16
138 16
139 16
140 16
141 15
142 13
143 13
144 11
145 11
146 11
147 11
148 10
149 10
150 9
151 9
152 9
153 9
154 9
155 9
156 8
157 8
158 8
159 8
160 8
161 8
162 8
163 7
164 7
165 7
166 7
167 7
168 7
169 7
170 6
171 6
172 6
173 6
174 6
175 6
176 6
177 5
178 5
179 5
180 5
181 5
182 5
183 5
184 5
185 5
186 5
187 5
188 4
189 4
190 4
191 4
192 4
193 4
194 4
195 4
196 4
197 4
198 4
199 4
200 4
201 4
202 4
203 4
204 4
205 4
206 4
207 4
208 4
209 4
210 4
211 4
212 4
213 4
214 4
215 4
216 4
217 4
218 4
219 4
220 4
221 4
222 4
223 4
224 4
225 4
226 4
227 4
228 4
229 4
230 4
231 4
232 4
233 3
234 3
235 3
236 3
237 3
238 3
239 3
240 3
241 3
242 3
243 3
244 3
245 2
246 2
247 2
248 2
249 2
250 2
251 2
252 2
253 2
254 2
255 2
256 2
257 2
258 2
259 2
260 2
261 2
262 2
263 2
264 2
265 2
266 2
267 2
268 2
269 2
270 2
271 2
272 1
273 1
274 1
275 1
276 1
277 1
278 1
279 1
280 1
281 1
282 1
283 1
284 1
285 1
286 1
287 1
288 1
289 1
290 1
291 1
292 1
293 1
Number of Histogram Entries: 10000000

Based on the histogram there are 244 UCEs in this region.

Longest match length: 293
Number of match strings: 1

Match1: 
TTTCCTTCTTAGAAAAGGGGTTAAAATTAGTAGGCACATTTCATATTAGCGTATTTCATGCAATAAAGCATAAATTATTTAAAATAACACGACCTTTTATCTTGCACCTTTTGAAGGAAGCAAATTAAAAATGTAAATTGGGAGCTAATTAATATGCAAATGTATTCATTCGCAGTTAACAATTAGCAATTAAACCTGCAGTGTCTACAAAGAGCACGGACAAAATTAGTAACTTAATTTATCATTAAAAAATGAAAACGTACACAAAATTTTAATTGACTTTCAAAATATTT
Description: In humans, this site codes for a long intergenic non-protein coding RNA. In the mm 10 genome it is recorded as a containing candidate cisregulatory elements,any may potentially code for the same RNA

FATSA: hg38_chr14_90Mb_100Mb.fa
Position: 6738449
Strand :Forward

FATSA: mm10_chr12_100Mb_110Mb.fa
Position: 5959934
Strand :Forward

Program: 
#include <string>
#include <iostream>
#include <fstream>
#include <vector>
#include <tuple>
#include <chrono>
using namespace std;

//A struct for working with matches
//Helper functions for string manipulation

char getComplement(char base){ //returns the reverse complement of a base
    if (base == 'A'){
        return 'T';
    }
    if (base == 'C'){
       return 'G';
    }
    if (base == 'G'){
       return 'C';
    }
    if (base == 'T'){
       return 'A';
    }
    else{
        return 'N';
    }
}


string * generateReverseComplement(string * strand){ //allocates the reverse complement of a strand to the heap
    string * outstr = new string();
    *outstr = "";
    string str = *strand;
    for (int i = 0; i < (*strand).size(); i++){
        (*outstr).push_back(getComplement(str[i]));
    }
    reverse((*outstr).begin(), (*outstr).end());
    return outstr;
}

int countBases(string * seq, char base){ //counts the number of occurences of a character in a string
    int count = 0;
    for (int i = 0; i < (*seq).size(); i++){
        if ((*seq)[i] == base){
            count++;
        }
    }
    return count;
}

string * readFASTA(string fileName){ //reads a standard fasta file, allocates it on the heap, and returs a pointer to its location
    string firstLine;
    string *returnString = new string;
    ifstream file;
    string buffer;
    file.open(fileName);
    if (file.is_open()){
        getline(file,firstLine);
        while (getline(file,buffer)){
            (*returnString).append(buffer);
        }
    }
    transform((*returnString).begin(), (*returnString).end(), (*returnString).begin(), ::toupper);
    return (returnString);
}
//Forward declarations for global variables
int compare (const void * a, const void * b);
ofstream outfile;


//string * sequence = readFASTA("test1.txt");
//string * sequence2 = readFASTA("test2.txt");

//string * sequence = readFASTA("CP001872.fna");
//string * sequence2 = readFASTA("CP003913.fna");
//string FASTA1 = "CP001872.fna";
//string FASTA2 = "CP003913.fna";

string * sequence = readFASTA("hg38_chr14_90Mb_100Mb.fa");
string * sequence2 = readFASTA("mm10_chr12_100Mb_110Mb.fa");
string FASTA1 = "hg38_chr14_90Mb_100Mb.fa";
string FASTA2 = "mm10_chr12_100Mb_110Mb.fa";





int cut1 = (*sequence).size();
int cut2 = (*sequence2).size() + cut1 + 1;

vector<vector<char *> > matchStrings(0);

int len = ((*sequence).size() + 2*(*sequence2).size());       

string * reverseSequence = generateReverseComplement(sequence2);


char* allSeq = new char[len + 3];


int *matches = new int[cut1 - 1];
int *histogram = new int[cut1 - 1];
void reportMatches();
void countLongestMatch(int);
int *sortMatrix = new int[len+3];
int *highestLength = new int;  
int countUCEs();


//main function
int main(){
    auto start = chrono::high_resolution_clock::now();
    outfile.open("HOMEWORK1_TIERNAN_KENNEDY.txt");
    outfile << "Assignment: Assignment1" << endl;
    outfile << "Name: Tiernan Kennedy" << endl;
    outfile << "Email: tiernan7@cs.washington.edu"  << endl;
    outfile << "Language: C++" << endl;
    outfile << endl;   
    outfile <<"*="<< (*sequence).size() << endl;
    outfile <<"A=" << countBases(sequence, 'A') << endl;
    outfile << "C="<<countBases(sequence, 'C') << endl;
    outfile << "G="<<countBases(sequence, 'G') << endl;
    outfile << "T="<<countBases(sequence, 'T') << endl;
    outfile << "N="<<countBases(sequence, 'N') << endl;
    outfile << endl;
    outfile <<"*="<< (*sequence2).size() << endl;
    outfile <<"A=" << countBases(sequence2, 'A') << endl;
    outfile << "C="<<countBases(sequence2, 'C') << endl;
    outfile << "G="<<countBases(sequence2, 'G') << endl;
    outfile << "T="<<countBases(sequence2, 'T') << endl;
    outfile << "N="<<countBases(sequence2, 'N') << endl;
    outfile << endl;
    
    //consolodating input strings
    memcpy(allSeq,(*sequence).c_str(),sizeof(char)*((*sequence).length() + 1));
    delete sequence;

    memcpy(&allSeq[cut1 + 1],(*sequence2).c_str(),sizeof(char)*((*sequence2).length() + 1));
    delete sequence2;


    memcpy(&allSeq[cut2 + 1],(*reverseSequence).c_str(),sizeof(char)*((*reverseSequence).length() + 1));
    delete reverseSequence;


    //Generate matrix of pointers to the positions in the sequence matrix
    for (int i = 0; i < len + 3; i++){
        sortMatrix[i] = i;
    }
    
    //quicksort the sequence based of interegers based on the lexographic comparison of the cooresponding sequence array positions
    qsort(sortMatrix,len + 3, sizeof(int), compare);

    


    //Calculated and prints the histogram and other relevant match data
    reportMatches();
    
    

    outfile << endl;
    auto stop = chrono::high_resolution_clock::now();
    auto duration = chrono::duration_cast<chrono::seconds>(stop - start);
    outfile << "Runtime: " << duration.count() << " seconds " << endl;
    outfile.close();

    return 0;
}

//Functions called from main that require variables allocated dynamically in main


int compare (const void * a, const void * b){
    int ind1 = *(int*)a;
    int ind2 = *(int*)b;
    const char *str1 = (const char *)&allSeq[ind1];
    const char *str2 = (const char *)&allSeq[ind2];
    return strcmp(str1, str2);

}

int getStrand(int origIndex){
    if (origIndex < cut1){
        return 1;
    }
    else if (origIndex < cut2){
        return 2;
    }
    else if (origIndex == cut1 || origIndex == cut2 || origIndex == len + 3){
        return -1;
    }
    else {
        return 3;
    }
}

int matchLength(char *seq1, char *seq2){
    int i = 0;
    while (seq1[i] == seq2[i]){
        i++;
    }
    return i;
}


string getFasta(int i){
    if (i == 1){
        return FASTA1;
    }
    else {
        return FASTA2;
    }
}

string getStrandText(int i){
    if ( i == 1 ){
        return "Forward";
    }
    else if (i == 2){
        return "Forward";
    }
    else {
        return "Reverse";
    }
} 



void reportMatches(){
    outfile << "Match Length Histogram:" << endl;

    

    for (int i = 0;i < len + 3; i++){
        int origIndex = sortMatrix[i];
        if (getStrand(origIndex) == 1){
            countLongestMatch(i);
         }
    }
    
    
    int histogramEntries = 0;
    for (int i = 0; i < cut1 - 1; i++){
        if (histogram[i] != 0){
            histogramEntries = histogramEntries + histogram[i];
            outfile << i << " " << histogram[i] << endl;
        }
    }
    outfile << "Number of Histogram Entries: " << histogramEntries << endl;
    outfile << endl;
    outfile << "Based on the histogram there are " << countUCEs() << " UCEs in this region." << endl;
    outfile << endl;
    outfile << "Longest match length: " << *highestLength<<endl;
    outfile << "Number of match strings: " << matchStrings.size()  << endl;
    for (int i = 0; i < matchStrings.size(); i++){
        outfile << endl;
        outfile << "Match" << i+1 << ": " <<endl;
        outfile << string(matchStrings[i][0]).substr(0,*highestLength) << endl;
        outfile << "Description:" << endl;
        int position = -1;
        for (int j = 0; j < matchStrings[i].size();j++){
            int index = matchStrings[i][j] - allSeq;
            if (getStrand(index) == 3){
                position = (index - (cut2+1)) - *highestLength + 1;
            }
            else if(getStrand(index) == 2){
                position = index - (cut1 + 1) + 1;
            }
            else {
                position = index + 1;
            }
            outfile << endl;
            outfile << "FATSA: "<< getFasta(getStrand(index)) << endl;
            outfile << "Position: "<< position  <<endl;
            outfile << "Strand :" <<  getStrandText(getStrand(index));
            outfile << endl;

        }
    }
        

    outfile << endl;
    outfile << "Program: " << endl;

}



void countLongestMatch(int sortedPosition){
    int leftMatch = sortedPosition - 1;
    int rightMatch = sortedPosition + 1;
    int *matchPosition = &matches[sortMatrix[sortedPosition]];
    char *match = nullptr;
    while (leftMatch >= 0){
        if (getStrand(sortMatrix[leftMatch]) != 1 && getStrand(sortMatrix[leftMatch]) != -1){
            *matchPosition = matchLength(&allSeq[sortMatrix[leftMatch]], &allSeq[sortMatrix[sortedPosition]]);
            match = &allSeq[sortMatrix[leftMatch]]; 
            break;
        }
        leftMatch--;
    }   
    while (rightMatch < len + 3){
        if (getStrand(sortMatrix[rightMatch]) != 1 && getStrand(sortMatrix[rightMatch]) != -1){
            int secondMatch = matchLength(&allSeq[sortMatrix[rightMatch]], &allSeq[sortMatrix[sortedPosition]]);
            if (secondMatch > *matchPosition){
                *matchPosition = secondMatch;
                match = &allSeq[sortMatrix[rightMatch]]; 
            }     
            break;
        }
        rightMatch++;
    }
    histogram[*matchPosition]++;
    if (*matchPosition == *highestLength){
        if ((string(&allSeq[sortMatrix[sortedPosition]]).substr(0,*highestLength).compare(string(match).substr(0,*highestLength))) != 0){
            *highestLength = *matchPosition;
            vector <char*> mstring(0);
            mstring.push_back(&allSeq[sortMatrix[sortedPosition]]);
            mstring.push_back(match);
            matchStrings.push_back(mstring);
        }
        else{
            bool true1 = false;
            bool true2 = false;
            vector<char *> question = matchStrings.back();
            for (int i = 0; i < question.size() ;i++){
                if (question[i] == match){
                    true1 = true;
                }
                if (question[i] == &allSeq[sortMatrix[sortedPosition]]){
                    true2 = true;
                }
            }
            if (not (true1)){
                    (matchStrings.back()).push_back(match);

            }
            if (not (true2)){
                    (matchStrings.back()).push_back(&allSeq[sortMatrix[sortedPosition]]);
            }
        }
    }
    else if (*matchPosition > *highestLength){
        *highestLength = *matchPosition;
        matchStrings.clear();
        vector<char *> mstring(0);
        mstring.push_back(&allSeq[sortMatrix[sortedPosition]]);
        mstring.push_back(match);
        matchStrings.push_back(mstring);
    }
}    


int countUCEs(){
    int count = 0;
    for (int i = 200; i < cut1-1;i++ ){
        count = count + histogram[i]; 
    }
    return count;
}


